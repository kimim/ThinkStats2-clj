#+TITLE: Chapter 2 Distributions

#+begin_src clojure :results silent
(ns thinkstats2.distributions
  (:require [clj-http.client :as client]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [tech.v3.dataset :as ds]
            [tech.v3.datatype.functional :as dfn]
            [tablecloth.api :as api]
            [thinkstats2-clj.nsfg :as nsfg]
            [thinkstats2-clj.chart :as chart])
  (:import java.util.zip.GZIPInputStream))
#+end_src

* Histograms

The *distribution* of a variable is the description of how many times the values
appeared in the dataset. The most common presentation of distribution is
*histogram*, which shows the *frequency* of each value.

In Clojure, the efficient way to compute frequency is with the ~frequencies~
function. Given a sequence of values, t:

#+begin_src clojure :results pp :exports both
(def t [1 1 2 2 2 3 3 3 3 4 5 5 6 7 7 8 8 8 9 9 9])
(->> (frequencies t))
#+end_src

#+RESULTS:
: {7 2, 1 2, 4 1, 6 1, 3 4, 2 3, 9 3, 5 2, 8 3}
:

The result is a map with the unique variable values as ~keys~ and the frequency of
the values as ~vals~.

* Representing histograms

With the result of ~frequencies~, we can get the frequency of the variable:

#+begin_src clojure :results pp :exports both
(def hist (frequencies [1 2 2 3 5]))
(hist 2)
#+end_src

#+RESULTS:
: 2
:

If we look up a value that has never appeared, the frequency is 0. We can use a
fallback replace value 0.

#+begin_src clojure :results pp :exports both
(hist 4 0)
#+end_src

#+RESULTS:
: 0
:

~keys~ returns a list of the object values in hist:

#+begin_src clojure :results pp :exports both
(keys hist)
#+end_src

#+RESULTS:
: (1 2 3 5)
:

* Plotting histograms

XChart[fn:1] is a light weight Java library for plotting data. With a small
clojure wrapper, we can easily draw charts:

#+begin_src clojure :results silent :file ../histogram.svg :exports both
(chart/histogram (chart/normalize {"x" {3 2 2 7 1 9} "y" {1 5 2 3 3 8 4 9}}) :filename "histogram.svg")
#+end_src

#+RESULTS:
[[file:../histogram.svg]]


* NSFG variables

#+begin_src clojure :results pp
(def fempreg-ds (nsfg/as-dataset "2002FemPreg.dct" "2002FemPreg.dat"))
(def freq (-> fempreg-ds
              (ds/set-dataset-name "2002FemPreg")
              (ds/filter #(and (= 1 (:outcome %))
                               (some? (:birthwgt-lb %))
                               (< (:birthwgt-lb %) 20)))
              :birthwgt-lb
              frequencies))
(sort freq)
#+end_src

#+RESULTS:
#+begin_example
([0 8]
 [1 40]
 [2 53]
 [3 98]
 [4 229]
 [5 697]
 [6 2223]
 [7 3049]
 [8 1889]
 [9 623]
 [10 132]
 [11 26]
 [12 10]
 [13 3]
 [14 3]
 [15 1])

#+end_example

The distribution of ~birthwgt-lb~ is of the *normal* distribution, also called a
*Caussian* distribution.

#+begin_src clojure :results silent :file ../distribute-birthwgt.svg :exports both
(chart/histogram (chart/normalize {"birthwgt-lb" freq}) :filename "distribute-birthwgt.svg"
                 :title "birthwgt-lb" :legend "birthwgt-lb")
#+end_src

#+RESULTS:
[[file:../distribute-birthwgt.svg]]

#+begin_src clojure :results pp
(def freq-oz (-> fempreg-ds
                 (ds/set-dataset-name "2002FemPreg")
                 (ds/filter #(and (= 1 (:outcome %))
                                  (some? (:birthwgt-oz %))
                                  (< (:birthwgt-oz %) 16)))
                 :birthwgt-oz
                 frequencies
                 ))
(sort freq-oz)
#+end_src

#+RESULTS:
#+begin_example
([0 1037]
 [1 408]
 [2 603]
 [3 533]
 [4 525]
 [5 535]
 [6 709]
 [7 501]
 [8 756]
 [9 505]
 [10 475]
 [11 557]
 [12 555]
 [13 487]
 [14 475]
 [15 378])

#+end_example

Distribution of ~brithwgt-oz~ is expected to be *uniform*:

#+begin_src clojure :results silent :file ../distribute-birthwgt-oz.svg :exports both
(chart/histogram (chart/normalize {"birthwgt-oz" freq-oz})  :filename "distribute-birthwgt-oz.svg"
                 :title "birthwgt-oz" :legend "birthwgt-oz")
#+end_src

#+RESULTS:
[[file:../distribute-birthwgt-oz.svg]]

#+begin_src clojure :results pp
(def freq-age (-> fempreg-ds
                  (ds/set-dataset-name "2002FemPreg")
                  (ds/filter #(and (= 1 (:outcome %))))
                  (ds/update-columns [:agepreg] #(dfn// % 100))
                  :agepreg
                  frequencies))
(sort freq-age)
#+end_src

#+RESULTS:
#+begin_example
([10 2]
 [11 1]
 [12 1]
 [13 14]
 [14 43]
 [15 128]
 [16 242]
 [17 398]
 [18 546]
 [19 559]
 [20 638]
 [21 646]
 [22 557]
 [23 593]
 [24 561]
 [25 512]
 [26 517]
 [27 489]
 [28 449]
 [29 395]
 [30 396]
 [31 339]
 [32 279]
 [33 220]
 [34 175]
 [35 138]
 [36 99]
 [37 83]
 [38 55]
 [39 34]
 [40 21]
 [41 14]
 [42 2]
 [43 1]
 [44 1])

#+end_example

The mother's age at the end of pregnancy:

#+begin_src clojure :results silent :file ../distribute-agepreg.svg :exports both
(chart/histogram (chart/normalize {"freq-age" freq-age}) :filename "distribute-agepreg.svg"
                 :legend "agepreg" :width 800 :height 600)
#+end_src

#+RESULTS:
[[file:../distribute-agepreg.svg]]

The distribution of pregnancy length shows that the most common value is 39
weeks.

#+begin_src clojure :results pp
(def freq-length (-> fempreg-ds
                     (ds/set-dataset-name "2002FemPreg")
                     (ds/filter #(and (= 1 (:outcome %))))
                     :prglngth
                     frequencies))
(sort freq-length)
#+end_src

#+RESULTS:
#+begin_example
([0 1]
 [4 1]
 [9 1]
 [13 1]
 [17 2]
 [18 1]
 [19 1]
 [20 1]
 [21 2]
 [22 7]
 [23 1]
 [24 13]
 [25 3]
 [26 35]
 [27 3]
 [28 32]
 [29 21]
 [30 138]
 [31 27]
 [32 115]
 [33 49]
 [34 60]
 [35 311]
 [36 321]
 [37 455]
 [38 607]
 [39 4693]
 [40 1116]
 [41 587]
 [42 328]
 [43 148]
 [44 46]
 [45 10]
 [46 1]
 [47 1]
 [48 7]
 [50 2])

#+end_example

#+begin_src clojure :results silent :file ../distribute-length.svg :exports both
(chart/histogram (chart/normalize {"freq-length" freq-length})
                 :filename "distribute-length.svg"
                 :width 800 :height 600)
#+end_src

#+RESULTS:
[[file:../distribute-length.svg]]

#+begin_src clojure :results pp
(def freq-1st (-> fempreg-ds
                  (ds/set-dataset-name "2002FemPreg")
                  (ds/filter #(and (= 1 (:outcome %))))
                  (ds/update-columns [:agepreg] #(dfn// % 100))
                  (ds/unique-by-column {:keep-fn #(first %2)} :caseid)
                  :agepreg
                  frequencies))
(sort freq-1st)
#+end_src

#+RESULTS:
#+begin_example
([10 2]
 [11 1]
 [12 1]
 [13 13]
 [14 42]
 [15 119]
 [16 214]
 [17 323]
 [18 417]
 [19 368]
 [20 374]
 [21 341]
 [22 254]
 [23 257]
 [24 234]
 [25 215]
 [26 196]
 [27 187]
 [28 161]
 [29 141]
 [30 152]
 [31 103]
 [32 85]
 [33 56]
 [34 49]
 [35 28]
 [36 24]
 [37 23]
 [38 17]
 [39 7]
 [40 4]
 [41 3]
 [42 1]
 [43 1])

#+end_example

#+begin_src clojure :results file :file ../distribute-1st-baby.svg :exports both
(chart/histogram (chart/normalize {"freq-1st" freq-1st})
                 :filename "distribute-1st-baby.svg"
                 :width 800 :height 600)
#+end_src

#+RESULTS:
[[file:../distribute-1st-baby.svg]]

* Outliers

#+begin_src clojure :results pp
(-> fempreg-ds
    (ds/set-dataset-name "2002FemPreg")
    (ds/filter #(and (= 1 (:outcome %))))
    :prglngth
    frequencies
    sort)
#+end_src

#+RESULTS:
#+begin_example
([0 1]
 [4 1]
 [9 1]
 [13 1]
 [17 2]
 [18 1]
 [19 1]
 [20 1]
 [21 2]
 [22 7]
 [23 1]
 [24 13]
 [25 3]
 [26 35]
 [27 3]
 [28 32]
 [29 21]
 [30 138]
 [31 27]
 [32 115]
 [33 49]
 [34 60]
 [35 311]
 [36 321]
 [37 455]
 [38 607]
 [39 4693]
 [40 1116]
 [41 587]
 [42 328]
 [43 148]
 [44 46]
 [45 10]
 [46 1]
 [47 1]
 [48 7]
 [50 2])

#+end_example

* First babies

#+begin_src clojure :results none
(def firsts (-> fempreg-ds
                (ds/filter #(and (= 1 (:outcome %))
                                 (= 1 (:birthord %))
                                 (< 27 (:prglngth %) 46)))
                :prglngth
                frequencies))
(def others (-> fempreg-ds
                (ds/filter #(and (= 1 (:outcome %))
                                 (not= 1 (:birthord %))
                                 (< 27 (:prglngth %) 46)))
                :prglngth
                frequencies))
#+end_src

Now, I need to write a plotting function to plot two hisograms.

#+begin_src clojure :results file :file ../test-data.svg :exports both
(chart/histogram (chart/normalize {"first" firsts "other" others})
                 :filename "test-data.svg")
#+end_src

#+RESULTS:
[[file:../test-data.svg]]

* Summarizing distributions

*Summary statistics* is used summarize the distribution with a few descriptive
statistics.

The most common summary statistic is the mean, which is meant to describe the
central tendency of the distribution.

#+begin_export latex
\begin{equation}
\bar{x} = \frac{1}{n} \sum_i x_i
\end{equation}
#+end_export

- The “mean” of a sample is the summary statistic computed with the previous
  formula.
- An “average” is one of several summary statistics you might choose to describe
  a central tendency.

* Variance

*Variance* is a summary statistic intended to describe the variability or spread
of a distribution. The variance of a set of values is

#+begin_export latex
\begin{equation}
S^2 = \frac{1}{n} \sum_i (x - \bar{x})^2
\end{equation}
#+end_export

The term $x_i − \bar{x}$ is called the “deviation from the mean,” so variance is
the mean squared deviation. The square root of variance, $S$, is the *standard
deviation*.

~tech.ml.dataset~ provides ~brief~ function to calculate mean, skew and
standard-deviation.

#+begin_src clojure :results pp :exports both
(-> fempreg-ds
    (ds/select-columns [:prglngth])
    (ds/brief))
#+end_src

#+RESULTS:
#+begin_example
({:min 0.0,
  :n-missing 0,
  :col-name :prglngth,
  :mean 29.531229309203265,
  :datatype :int64,
  :skew -0.8663942065538816,
  :standard-deviation 13.802522867903576,
  :quartile-3 39.0,
  :n-valid 13593,
  :quartile-1 13.0,
  :median 39.0,
  :max 50.0,
  :first 39,
  :last 39})

#+end_example

* Footnotes

[fn:1] https://github.com/knowm/XChart
