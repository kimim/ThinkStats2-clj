#+TITLE: Chapter 2 Distributions

#+begin_src clojure :results silent
(ns thinkstats2.distributions
  (:require [clj-http.client :as client]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [tech.v3.dataset :as ds]
            [tablecloth.api :as api]
            [thinkstats2-clj.nsfg :as nsfg]
            [thinkstats2-clj.chart :as chart])
  (:import java.util.zip.GZIPInputStream))
#+end_src

* Histograms

In Clojure, the efficient way to compute frequency is with the ~frequencies~
function. Given a sequence of values, t:

#+begin_src clojure :results pp :exports both
(def t [1 1 2 2 2 3 3 3 3 4 5 5 6 7 7 8 8 8 9 9 9])
(->> (frequencies t)
     (sort-by val))
#+end_src

#+RESULTS:
: ([4 1] [6 1] [7 2] [1 2] [5 2] [2 3] [9 3] [8 3] [3 4])
:

* Representing histograms

With the result of ~frequencies~, we can get a value with the key:

#+begin_src clojure :results pp :exports both
(def hist (frequencies [1 2 2 3 5]))
(hist 2)
#+end_src

#+RESULTS:
: 2
:

If we look up a value that has never appeared, the frequency is 0. We can use a
fallback replace value 0.

#+begin_src clojure :results pp :exports both
(hist 4 0)
#+end_src

#+RESULTS:
: 0
:

~keys~ returns a list of the object values in hist:

#+begin_src clojure :results pp :exports both
(keys hist)
#+end_src

#+RESULTS:
: (1 2 3 5)
:

* Plotting histograms

XChart[fn:1] is a light weight Java library for plotting data. With a small
clojure wrapper, we can easily draw charts:

#+begin_src clojure :results file :file ../histogram.svg :exports both
(require '[thinkstats2-clj.chart :as chart])
(chart/histogram [1 2 3] [ 1 2 3] :filename "histogram.svg")
#+end_src

#+RESULTS:
[[file:../histogram.svg]]

* NSFG variables

#+begin_src clojure :results silent
(def fempreg-ds (nsfg/as-dataset "2002FemPreg.dct" "2002FemPreg.dat"))
(def freq (-> fempreg-ds
              (ds/set-dataset-name "2002FemPreg")
              :birthwgt-lb
              (->> (filter some?)
                   (filter #(< % 20)))
              frequencies
              sort))
(def freq-xs (map first freq))
(def freq-ys (map second freq))
#+end_src

#+begin_src clojure :results file :file ../distribute-birthwgt.svg :exports both
(chart/histogram freq-xs freq-ys :filename "distribute-birthwgt.svg")
#+end_src

#+RESULTS:
[[file:../distribute-birthwgt.svg]]





* Footnotes

[fn:1] https://github.com/knowm/XChart
