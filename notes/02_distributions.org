#+TITLE: Chapter 2 Distributions

#+begin_src clojure :results silent
(ns thinkstats2.distributions
  (:require [clj-http.client :as client]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [tech.v3.dataset :as ds]
            [tech.v3.datatype.functional :as dfn]
            [tablecloth.api :as api]
            [thinkstats2-clj.nsfg :as nsfg]
            [thinkstats2-clj.chart :as chart])
  (:import java.util.zip.GZIPInputStream))
#+end_src

* Histograms

The *distribution* of a variable is the description of how many times the values
appeared in the dataset. The most common presentation of distribution is
*histogram*, which shows the *frequency* of each value.

In Clojure, the efficient way to compute frequency is with the ~frequencies~
function. Given a sequence of values, t:

#+begin_src clojure :results pp :exports both
(def t [1 1 2 2 2 3 3 3 3 4 5 5 6 7 7 8 8 8 9 9 9])
(->> (frequencies t))
#+end_src

#+RESULTS:
: {7 2, 1 2, 4 1, 6 1, 3 4, 2 3, 9 3, 5 2, 8 3}
:

The result is a map with the unique variable values as ~keys~ and the frequency of
the values as ~vals~.

* Representing histograms

With the result of ~frequencies~, we can get the frequency of the variable:

#+begin_src clojure :results pp :exports both
(def hist (frequencies [1 2 2 3 5]))
(hist 2)
#+end_src

#+RESULTS:
: 2
:

If we look up a value that has never appeared, the frequency is 0. We can use a
fallback replace value 0.

#+begin_src clojure :results pp :exports both
(hist 4 0)
#+end_src

#+RESULTS:
: 0
:

~keys~ returns a list of the object values in hist:

#+begin_src clojure :results pp :exports both
(keys hist)
#+end_src

#+RESULTS:
: (1 2 3 5)
:

* Plotting histograms

XChart[fn:1] is a light weight Java library for plotting data. With a small
clojure wrapper, we can easily draw charts:

#+begin_src clojure :results silent :file ../histogram.svg :exports both
(chart/histogram (chart/normalize {"x" {3 2 2 7 1 9} "y" {1 5 2 3 3 8 4 9}}) :filename "histogram.svg")
#+end_src

#+RESULTS:
[[file:../histogram.svg]]


* NSFG variables

#+begin_src clojure :results pp
(def fempreg-ds (nsfg/as-dataset "2002FemPreg.dct" "2002FemPreg.dat"))
(def freq (-> fempreg-ds
              (ds/set-dataset-name "2002FemPreg")
              (ds/filter #(and (= 1 (:outcome %))
                               (some? (:birthwgt-lb %))
                               (< (:birthwgt-lb %) 20)))
              :birthwgt-lb
              frequencies))
freq
#+end_src

#+RESULTS:
#+begin_example
{0 8,
 7 3049,
 1 40,
 4 229,
 15 1,
 13 3,
 6 2223,
 3 98,
 12 10,
 2 53,
 11 26,
 9 623,
 5 697,
 14 3,
 10 132,
 8 1889}

#+end_example

The distribution of ~birthwgt-lb~ is of the *normal* distribution, also called a
*Caussian* distribution.

#+begin_src clojure :results silent :file ../distribute-birthwgt.svg :exports both
(chart/histogram (chart/normalize {"birthwgt-lb" freq}) :filename "distribute-birthwgt.svg"
                 :title "birthwgt-lb" :legend "birthwgt-lb")
#+end_src

#+RESULTS:
[[file:../distribute-birthwgt.svg]]

#+begin_src clojure :results pp
(def freq-oz (-> fempreg-ds
                 (ds/set-dataset-name "2002FemPreg")
                 (ds/filter #(and (= 1 (:outcome %))
                                  (some? (:birthwgt-oz %))
                                  (< (:birthwgt-oz %) 16)))
                 :birthwgt-oz
                 frequencies
                 ))
(def freq-xs-oz (map first freq-oz))
(def freq-ys-oz (map second freq-oz))
freq-oz
#+end_src

#+RESULTS:
#+begin_example
{0 1037,
 7 501,
 1 408,
 4 525,
 15 378,
 13 487,
 6 709,
 3 533,
 12 555,
 2 603,
 11 557,
 9 505,
 5 535,
 14 475,
 10 475,
 8 756}

#+end_example

Distribution of ~brithwgt-oz~ is expected to be *uniform*:

#+begin_src clojure :results silent :file ../distribute-birthwgt-oz.svg :exports both
(chart/histogram (chart/normalize {"birthwgt-oz" freq-oz})  :filename "distribute-birthwgt-oz.svg"
                 :title "birthwgt-oz" :legend "birthwgt-oz")
#+end_src

#+RESULTS:
[[file:../distribute-birthwgt-oz.svg]]

#+begin_src clojure :results pp
(def freq-age (-> fempreg-ds
                  (ds/set-dataset-name "2002FemPreg")
                  (ds/filter #(and (= 1 (:outcome %))))
                  (ds/update-columns [:agepreg] #(dfn// % 100))
                  :agepreg
                  frequencies))
(def freq-xs-age (map first freq-age))
(def freq-ys-age (map second freq-age))
freq-age
#+end_src

#+RESULTS:
#+begin_example
{20 638,
 27 489,
 24 561,
 39 34,
 15 128,
 21 646,
 31 339,
 32 279,
 40 21,
 33 220,
 13 14,
 22 557,
 36 99,
 41 14,
 43 1,
 29 395,
 44 1,
 28 449,
 25 512,
 34 175,
 17 398,
 12 1,
 23 593,
 35 138,
 19 559,
 11 1,
 14 43,
 26 517,
 16 242,
 38 55,
 30 396,
 10 2,
 18 546,
 42 2,
 37 83}

#+end_example

The mother's age at the end of pregnancy:

#+begin_src clojure :results silent :file ../distribute-agepreg.svg :exports both
(chart/histogram (chart/normalize {"freq-age" freq-age}) :filename "distribute-agepreg.svg"
                 :legend "agepreg" :width 800 :height 600)
#+end_src

#+RESULTS:
[[file:../distribute-agepreg.svg]]

The distribution of pregnancy length shows that the most common value is 39
weeks.

#+begin_src clojure :results pp
(def freq-length (-> fempreg-ds
                     (ds/set-dataset-name "2002FemPreg")
                     (ds/filter #(and (= 1 (:outcome %))))
                     :prglngth
                     frequencies))
(def freq-xs-length (map first freq-length))
(def freq-ys-length (map second freq-length))
freq-length
#+end_src

#+RESULTS:
#+begin_example
{0 1,
 20 1,
 27 3,
 24 13,
 39 4693,
 46 1,
 4 1,
 48 7,
 50 2,
 21 2,
 31 27,
 32 115,
 40 1116,
 33 49,
 13 1,
 22 7,
 36 321,
 41 587,
 43 148,
 29 21,
 44 46,
 28 32,
 25 3,
 34 60,
 17 2,
 23 1,
 47 1,
 35 311,
 19 1,
 9 1,
 45 10,
 26 35,
 38 607,
 30 138,
 18 1,
 42 328,
 37 455}

#+end_example

#+begin_src clojure :results silent :file ../distribute-length.svg :exports both
(chart/histogram (chart/normalize {"freq-length" freq-length})
                 :filename "distribute-length.svg"
                 :width 800 :height 600)
#+end_src

#+RESULTS:
[[file:../distribute-length.svg]]

#+begin_src clojure :results pp
(def freq-1st (-> fempreg-ds
                  (ds/set-dataset-name "2002FemPreg")
                  (ds/filter #(and (= 1 (:outcome %))))
                  (ds/update-columns [:agepreg] #(dfn// % 100))
                  (ds/unique-by-column {:keep-fn #(first %2)} :caseid)
                  :agepreg
                  frequencies))
(def freq-xs-1st (map first freq-1st))
(def freq-ys-1st (map second freq-1st))
freq-1st
#+end_src

#+RESULTS:
#+begin_example
{20 374,
 27 187,
 24 234,
 39 7,
 15 119,
 21 341,
 31 103,
 32 85,
 40 4,
 33 56,
 13 13,
 22 254,
 36 24,
 41 3,
 43 1,
 29 141,
 28 161,
 25 215,
 34 49,
 17 323,
 12 1,
 23 257,
 35 28,
 19 368,
 11 1,
 14 42,
 26 196,
 16 214,
 38 17,
 30 152,
 10 2,
 18 417,
 42 1,
 37 23}

#+end_example

#+begin_src clojure :results file :file ../distribute-1st-baby.svg :exports both
(chart/histogram (chart/normalize {"freq-1st" freq-1st})
                 :filename "distribute-1st-baby.svg"
                 :width 800 :height 600)
#+end_src

#+RESULTS:
[[file:../distribute-1st-baby.svg]]

* Outliers

#+begin_src clojure :results pp
(-> fempreg-ds
    (ds/set-dataset-name "2002FemPreg")
    (ds/filter #(and (= 1 (:outcome %))))
    :prglngth
    frequencies)
#+end_src

#+RESULTS:
#+begin_example
{0 1,
 20 1,
 27 3,
 24 13,
 39 4693,
 46 1,
 4 1,
 48 7,
 50 2,
 21 2,
 31 27,
 32 115,
 40 1116,
 33 49,
 13 1,
 22 7,
 36 321,
 41 587,
 43 148,
 29 21,
 44 46,
 28 32,
 25 3,
 34 60,
 17 2,
 23 1,
 47 1,
 35 311,
 19 1,
 9 1,
 45 10,
 26 35,
 38 607,
 30 138,
 18 1,
 42 328,
 37 455}

#+end_example

* First babies

#+begin_src clojure :results pp
(def firsts (-> fempreg-ds
                (ds/filter #(and (= 1 (:outcome %))
                                 (= 1 (:birthord %))
                                 (< 27 (:prglngth %) 46)))
                :prglngth
                frequencies))
(def others (-> fempreg-ds
                (ds/filter #(and (= 1 (:outcome %))
                                 (not= 1 (:birthord %))
                                 (< 27 (:prglngth %) 46)))
                :prglngth
                frequencies))
[firsts others]
#+end_src

#+RESULTS:
#+begin_example
[{39 2114,
  31 15,
  32 55,
  40 536,
  33 28,
  36 172,
  41 360,
  43 87,
  29 9,
  44 23,
  28 24,
  34 29,
  35 159,
  45 6,
  38 272,
  30 73,
  42 205,
  37 208}
 {39 2579,
  31 12,
  32 60,
  40 580,
  33 21,
  36 149,
  41 227,
  43 61,
  29 12,
  44 23,
  28 8,
  34 31,
  35 152,
  45 4,
  38 335,
  30 65,
  42 123,
  37 247}]

#+end_example

Now, I need to write a plotting function to plot two hisograms.

#+begin_src clojure :results file :file ../test-data.svg :exports both
(chart/histogram (chart/normalize {"first" firsts "other" others})
                 :filename "test-data.svg")
#+end_src

#+RESULTS:
[[file:../test-data.svg]]



* Footnotes

[fn:1] https://github.com/knowm/XChart
