#+TITLE: Chapter 01 Exploratory Data Analysis

In this chapter, Allen Downey introduces the statistic data in Stata dictionary
format. Thus we need to decode the data in Clojure first.

We'll put all the needed namespaces in the begining:

#+begin_src clojure :results silent
(ns thinkstats2.exploratory-data-analaysis
  (:require [clj-http.client :as client]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [tech.v3.dataset :as ds]
            [tablecloth.api :as api])
  (:import java.util.zip.GZIPInputStream))
#+end_src

* Get the data from CDC

Data used in chapter 1 is from CDC. I do not want to keep a local copy in
github(reduce clone time and save spaces for github), so we will download the
needed data from CDC. ~fetch-data!~ is a function to fetch data file from URL,
and put it to top folder. ~2002FemPreg.dct~ is the Stata dictionary definition
file, and ~20202FemPreg.dat~ is the data file.

#+begin_src clojure :results pp :exports both
(defn fetch-data! [url]
  (let [req (client/get url {:as :byte-array :throw-exceptions false})]
    (if (= (:status req) 200)
      (-> (:body req)
          (io/copy (io/file (last (str/split url #"/"))))))))

(fetch-data! "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/NSFG/stata/2002FemPreg.dct")
(fetch-data! "https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/NSFG/2002FemPreg.dat")
#+end_src

#+RESULTS:
: nil

* Parse the data

Ray Miller already did this work, so let's reuse it [fn:1].

The format of a ~.dct~ file looks like this:

#+begin_example
infile dictionary {
    _column(1)      str12                             caseid  %12s  "RESPONDENT ID NUMBER"
   _column(13)       byte                           pregordr   %2f  "PREGNANCY ORDER (NUMBER)"
   ...
   }
#+end_example

It is easy to extract lines with regex:

#+begin_src clojure :results pp :exports both
(def dict-line-rx #"^\s+_column\((\d+)\)\s+(\S+)\s+(\S+)\s+%(\d+)(\S)\s+\"([^\"]+)\"")
(def line (with-open [r (io/reader "2002FemPreg.dct")]
            (first (rest (line-seq r)))))
line
#+end_src

#+RESULTS:
: "    _column(1)      str12                             caseid  %12s  \"RESPONDENT ID NUMBER\""
:

#+begin_src clojure :results pp :exports both
(re-find dict-line-rx line)
#+end_src

#+RESULTS:
: ["    _column(1)      str12                             caseid  %12s  \"RESPONDENT ID NUMBER\""
:  "1"
:  "str12"
:  "caseid"
:  "12"
:  "s"
:  "RESPONDENT ID NUMBER"]
:

Then we define ~parse-dict-line~ to extract a key mapped info from one line:

#+begin_src clojure :results pp :exports both
(defn parse-dict-line
  [line]
  (try (let [[_ col type name f-len f-spec descr] (re-find dict-line-rx line)]
         {:col    (dec (Integer/parseInt col))
          :type   type
          :name   (str/replace name "_" "-")
          :f-len  (Integer/parseInt f-len)
          :f-spec f-spec
          :descr  descr})
       (catch Exception e (println line))))
#+end_src

#+RESULTS:
: #'thinkstats2.exploratory-data-analaysis/parse-dict-line
:

#+begin_src clojure :results pp :exports both
(parse-dict-line line)
#+end_src

#+RESULTS:
: {:col 0,
:  :type "str12",
:  :name "caseid",
:  :f-len 12,
:  :f-spec "s",
:  :descr "RESPONDENT ID NUMBER"}
:



#+begin_src clojure :results pp :exports both
(defn read-dict-defn
  "Read a Stata dictionary file, return a vector of column definitions."
  [path]
  (with-open [r (io/reader path)]
    (mapv parse-dict-line (butlast (rest (line-seq r))))))
#+end_src

#+RESULTS:
: #'thinkstats2.exploratory-data-analaysis/read-dict-defn
:

#+begin_src clojure :results pp :exports both
(def dict (read-dict-defn "2002FemPreg.dct"))
#+end_src

#+RESULTS:
: #'thinkstats2.exploratory-data-analaysis/dict
:


#+begin_src clojure :results pp :exports both
(count dict)
#+end_src

#+RESULTS:
: 243
:

#+begin_src clojure :results pp
(take 2 dict)
#+end_src

#+RESULTS:
#+begin_example
({:col 0,
  :type "str12",
  :name "caseid",
  :f-len 12,
  :f-spec "s",
  :descr "RESPONDENT ID NUMBER"}
 {:col 12,
  :type "byte",
  :name "pregordr",
  :f-len 2,
  :f-spec "f",
  :descr "PREGNANCY ORDER (NUMBER)"})

#+end_example

#+begin_src clojure :results pp :exports both
(defn parse-value
  [type raw-value]
  (when (not (empty? raw-value))
    (case type
      ("str12")          raw-value
      ("byte" "int")     (Long/parseLong raw-value)
      ("float" "double") (Double/parseDouble raw-value))))
#+end_src

#+RESULTS:
: #'thinkstats2.exploratory-data-analaysis/parse-value
:

#+begin_src clojure :results pp :exports both
(defn make-row-parser
  "Parse a row from a Stata data file according to the specification in `dict`.
   Return a vector of columns."
  [dict]
  (fn [row]
    (reduce (fn [accum {:keys [col type name f-len]}]
              (let [raw-value (str/trim (subs row col (+ col f-len)))]
                (conj accum (parse-value type raw-value))))
            []
            dict)))
#+end_src

#+RESULTS:
: #'thinkstats2.exploratory-data-analaysis/make-row-parser
:

#+begin_src clojure :results pp :exports both
(defn reader
  "Open path with io/reader; coerce to a GZIPInputStream if suffix is .gz"
  [path]
  (if (.endsWith path ".gz")
    (io/reader (GZIPInputStream. (io/input-stream path)))
    (io/reader path)))
#+end_src

#+RESULTS:
: #'thinkstats2.exploratory-data-analaysis/reader
:

#+begin_src clojure :results pp :exports both
(defn read-dct-data
  "Parse lines from `rdr` according to the specification in `dict`.
   Return a lazy sequence of parsed rows."
  [dict rdr]
  (let [parse-fn (make-row-parser dict)]
    (map parse-fn (line-seq rdr))))
#+end_src

#+RESULTS:
: #'thinkstats2.exploratory-data-analaysis/read-dct-data
:

#+begin_src clojure :results pp :exports both
(defn as-dataset
  "Read Stata data set, return an Incanter dataset."
  [dict-path data-path]
  (let [dict   (read-dict-defn dict-path)
        header (map (comp keyword :name) dict)]
    (with-open [r (reader data-path)]
      (api/dataset (read-dct-data dict r)
                   {:layout :as-rows
                    :column-names header
                    :dataset-name "2002FemPreg"}))))

(def fempreg-ds (as-dataset "2002FemPreg.dct" "2002FemPreg.dat"))
#+end_src

#+RESULTS:
: #'thinkstats2.exploratory-data-analaysis/fempreg-ds
:

Assgin a name to the dataset:

#+begin_src clojure :results pp
(def fempreg-ds (ds/set-dataset-name fempreg-ds "2002FemPreg"))
(ds/dataset-name fempreg-ds)
#+end_src

#+RESULTS:
: "2002FemPreg"
:


The total count of columns is 243? and rows is 13593:

#+begin_src clojure :results pp
(ds/shape fempreg-ds)
#+end_src

#+RESULTS:
: [243 13593]
:

#+begin_src clojure :results pp
(ds/select-by-index fempreg-ds [0 1 2 3] [1 2 3])
#+end_src

#+RESULTS:
: 2002FemPreg [3 4]:
:
: | :caseid | :pregordr | :howpreg-n | :howpreg-p |
: |---------|----------:|-----------:|-----------:|
: |       1 |         2 |            |            |
: |       2 |         1 |            |            |
: |       2 |         2 |            |            |
:
:


#+begin_src clojure :results pp
(ds/select-by-index fempreg-ds [0 1] [1 2 3 4 5])
#+end_src

#+RESULTS:
#+begin_example
2002FemPreg [5 2]:

| :caseid | :pregordr |
|---------|----------:|
|       1 |         2 |
|       2 |         1 |
|       2 |         2 |
|       2 |         3 |
|       6 |         1 |


#+end_example

~ds/column-names~ returns full list of column names. Here we print out the first
10 of 243 columns:

#+begin_src clojure :results pp
(->> (ds/column-names fempreg-ds)
     (take 10))
#+end_src

#+RESULTS:
#+begin_example
(:caseid
 :pregordr
 :howpreg-n
 :howpreg-p
 :moscurrp
 :nowprgdk
 :pregend1
 :pregend2
 :nbrnaliv
 :multbrth)

#+end_example

The result is a list, we can take any of them:

#+begin_src clojure :results pp
(-> (ds/column-names fempreg-ds)
    (nth 1))
#+end_src

#+RESULTS:
: :pregordr
:

To access a column, we can use the column name as key:

#+begin_src clojure :results pp
(def pregordr (fempreg-ds :pregordr))
pregordr
#+end_src

#+RESULTS:
: #tech.v3.dataset.column<int64>[13593]
: :pregordr
: [1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 1, 1, 2, 3, 1, 2, 3, 1, 2, 1...]
:

~pregordr~ is a column type, we can use ~tech.v3.dataset.column~ to check type, get
name and select some:

#+begin_src clojure :results silent
(require '[tech.v3.dataset.column :as col])
#+end_src

To check whether it is a column:

#+begin_src clojure :results pp
(col/is-column? pregordr)
#+end_src

#+RESULTS:
: true
:

To get the column name:

#+begin_src clojure :results pp
(col/column-name pregordr)
#+end_src

#+RESULTS:
: :pregordr
:

To select some elements:

#+begin_src clojure :results pp
(col/select pregordr (concat [0] (range 2 6)))
#+end_src

#+RESULTS:
: #tech.v3.dataset.column<int64>[5]
: :pregordr
: [1, 1, 2, 3, 1]
:

We can also get some statistic information from the column:

#+begin_src clojure :results pp
(col/stats pregordr #{:mean :variance :median :skew})
#+end_src

#+RESULTS:
: {:mean 2.3491502979474728,
:  :skew 1.9296432708168343,
:  :variance 2.4894741528796667,
:  :median 2.0}
:

* Variables

In ThinkStats2, following variables will be used:
- ~caseid~ is the integer ID of the respondent
- ~prglngth~ is the integer duration of the pregnancy in weeks.
- ~outcome~ is an integer code for the outcome of the pregnancy. The code 1
  indicates a live birth.
- ~pregordr~ is a pregnancy serial number; for example, the code for a
  respondent’s first pregnancy is 1, for the second pregnancy is 2, and so on.
- ~birthord~ is a serial number for live births; the code for a respondent’s
  first child is 1, and so on. For outcomes other than live birth, this field
  is blank.
- ~birthwgt-lb~ and ~birthwgt-oz~ contain the pounds and ounces parts of the birth
  weight of the baby.
- ~agepreg~ is the mother’s age at the end of the pregnancy.
- ~finalwgt~ is the statistical weight associated with the respondent. It is a
  floating-point value that indicates the number of people in the
  U.S. population this respondent represents.

Let's have a quick view of these data:

#+begin_src clojure :results pp
(ds/select-columns fempreg-ds
                   [:caseid :prglngth :outcome :pregordr
                    :birthord :birthwgt-lb :birthwgt-oz
                    :agepreg :finalwgt])
#+end_src

#+RESULTS:
#+begin_example
2002FemPreg [13593 9]:

| :caseid | :prglngth | :outcome | :pregordr | :birthord | :birthwgt-lb | :birthwgt-oz | :agepreg |      :finalwgt |
|---------|----------:|---------:|----------:|----------:|-------------:|-------------:|---------:|---------------:|
|       1 |        39 |        1 |         1 |         1 |            8 |           13 |     3316 |  6448.27111170 |
|       1 |        39 |        1 |         2 |         2 |            7 |           14 |     3925 |  6448.27111170 |
|       2 |        39 |        1 |         1 |         1 |            9 |            2 |     1433 | 12999.54226439 |
|       2 |        39 |        1 |         2 |         2 |            7 |            0 |     1783 | 12999.54226439 |
|       2 |        39 |        1 |         3 |         3 |            6 |            3 |     1833 | 12999.54226439 |
|       6 |        38 |        1 |         1 |         1 |            8 |            9 |     2700 |  8874.44079922 |
|       6 |        40 |        1 |         2 |         2 |            9 |            9 |     2883 |  8874.44079922 |
|       6 |        42 |        1 |         3 |         3 |            8 |            6 |     3016 |  8874.44079922 |
|       7 |        39 |        1 |         1 |         1 |            7 |            9 |     2808 |  6911.87992053 |
|       7 |        35 |        1 |         2 |         2 |            6 |           10 |     3233 |  6911.87992053 |
|      12 |        39 |        1 |         1 |         1 |            7 |           13 |     2575 |  6909.33161825 |
|      14 |        39 |        1 |         1 |         1 |            7 |            0 |     2300 |  3039.90450710 |
|      14 |        37 |        1 |         2 |         2 |            4 |            0 |     2458 |  3039.90450710 |
|      14 |         9 |        2 |         3 |           |              |              |     2983 |  3039.90450710 |
|      15 |         3 |        4 |         1 |           |              |              |     2750 |  5553.49559922 |
|      15 |        33 |        1 |         2 |         1 |            7 |           11 |     2833 |  5553.49559922 |
|      15 |        33 |        1 |         3 |         2 |            7 |            8 |     3033 |  5553.49559922 |
|      18 |        39 |        1 |         1 |         1 |            6 |            5 |     1891 |  4153.37174143 |
|      18 |         5 |        4 |         2 |           |              |              |     2783 |  4153.37174143 |
|      21 |        41 |        1 |         1 |         1 |            8 |           12 |     2791 |  7237.12263041 |
|      21 |        39 |        1 |         2 |         2 |            8 |            3 |     3058 |  7237.12263041 |
|      23 |        39 |        1 |         1 |         1 |            5 |            9 |     1891 | 13533.38204312 |
|      23 |         8 |        4 |         2 |           |              |              |     2708 | 13533.38204312 |
|      24 |        39 |        1 |         1 |         1 |            6 |           12 |     2225 |  7424.84041447 |
|      24 |        39 |        1 |         2 |         2 |            7 |            6 |     2575 |  7424.84041447 |


#+end_example



* Dataset


* Footnotes

[fn:1] https://tech.metail.com/think-stats-in-clojure-i/
