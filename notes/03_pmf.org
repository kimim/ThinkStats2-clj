#+TITLE: Chapter 3 Probability mass functions

* Pmfs

Another way to represent a distribution is a *probability mass function(PMF)*,
which maps from each value to its probability.

A *probability* is a frequency expressed as a fraction of the sample size, $n$. To get from frequencies to probabilities, we divide through by $n$, which is called *normalization*.

We can map the division to each frequencies to get the probability:

#+begin_src clojure :results pp :exports both
(def hist (frequencies [1 2 2 3 3 4 5]))
(def n (count hist))
(->> hist
     (map #(vec [(first %) (/ (second %) n)]))
     (into {}))
#+end_src

#+RESULTS:
: {1 1/5, 2 2/5, 3 2/5, 4 1/5, 5 1/5}
:

We can define a function ~probabilities~ to get the result:

#+begin_src clojure :results pp :exports both
(defn probabilities [coll]
  (let [n (count coll)]
    (->> coll
         frequencies
         (map #(vec [(first %) (/ (second %) n)]))
         (into {}))))

(probabilities [1 2 2 3 5])
#+end_src

#+RESULTS:
: {1 1/5, 2 2/5, 3 1/5, 5 1/5}
:

The ~probabilities~ is normalized so total probability is 1:

#+begin_src clojure :results pp :exports both
(->> [1 2 2 3 5]
     probabilities
     (map second)
     (reduce +))
#+end_src

#+RESULTS:
: 1N
:
