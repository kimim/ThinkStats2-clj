#+TITLE: Chapter 4 Cumulative distribution functions
#+LATEX_CLASS: article

#+begin_src clojure :results silent :eval no-export
(ns thinkstats2.probability-mass-functions
  (:require [tech.v3.dataset :as ds]
            [tech.v3.datatype.functional :as dfn]
            [tablecloth.api :as api]
            [clj-chart.chart :as chart]
            [clj-chart.plot :refer [store!]]
            [thinkstats2-clj.nsfg :as nsfg]
            [thinkstats2-clj.pmf :as pmf]
            [thinkstats2-clj.cdf :as cdf]))
#+end_src

* The limits of PMFs
PMFs work well if the number of values is small. But as the number of
values increases, the probability associated with each value gets
smaller and the effect of random noise increases.

Calculate the total weight of first and other babies:

#+begin_src clojure :results value :eval no-export
(def fempreg-ds (nsfg/as-dataset "2002FemPreg.dct" "2002FemPreg.dat"))
(def fempreg-ds-with-totalwgt_lb
  (let [fempreg-ds-drop-special-wgt
        (-> fempreg-ds
            (ds/filter #(not
                         (or
                          (contains? #{97 98 99} (:birthwgt-lb %))
                          (contains? #{97 98 99} (:birthwgt-oz %))))))]
    (ds/add-or-update-column
     fempreg-ds-drop-special-wgt
     :totalwgt-lb
     (dfn/+
      (fempreg-ds-drop-special-wgt :birthwgt-lb)
      (dfn//
       (fempreg-ds-drop-special-wgt :birthwgt-oz)
       16.)))))

(def firsts-wgt (-> fempreg-ds-with-totalwgt_lb
                    (ds/filter #(and (= 1 (:outcome %))
                                     (= 1 (:birthord %))
                                     (some? (:totalwgt-lb %))
                                     (<= (:totalwgt-lb %) 16)))
                    :totalwgt-lb
                    nsfg/probabilities))

(def others-wgt (-> fempreg-ds-with-totalwgt_lb
                    (ds/filter #(and (= 1 (:outcome %))
                                     (not= 1 (:birthord %))
                                     (some? (:totalwgt-lb %))
                                     (<= (:totalwgt-lb %) 16)))
                    :totalwgt-lb
                    nsfg/probabilities))
#+end_src

#+RESULTS:
| #'thinkstats2.probability-mass-functions/fempreg-ds                  |
| #'thinkstats2.probability-mass-functions/fempreg-ds-with-totalwgt_lb |
| #'thinkstats2.probability-mass-functions/firsts-wgt                  |
| #'thinkstats2.probability-mass-functions/others-wgt                  |

#+begin_src clojure :results file :output-dir figures :file first-other-totalwgt-prob-histogram.svg :exports both :eval no-export
(let [chart (chart/bar {:x-axis "weight(pounds)"
                        :y-axis "probability"
                        :series [{:name "first"
                                  :xs (keys (sort firsts-wgt))
                                  :ys (vals (sort firsts-wgt))}
                                 {:name "other"
                                  :xs (keys (sort others-wgt))
                                  :ys (vals (sort others-wgt))}]})]
  (store! chart nil "notes/figures/first-other-totalwgt-prob-histogram.svg"))
#+end_src

#+CAPTION: PMF of birth weights. This figure shows a limitation of PMFs: they are hard to compare visually.
#+NAME: first-other-totalwgt-prob-histogram
#+RESULTS:
[[file:figures/first-other-totalwgt-prob-histogram.svg]]

# TODO: How to make the x axis sparser?

These problems can be mitigated by binning the data; that is, dividing
the range of values into non-overlapping intervals and counting the
number of values in each bin. Binning can be useful, but it is tricky
to get the size of the bins right. If they are big enough to smooth
out noise, they might also smooth out useful information.

An alternative that avoids these problems is the cumulative
distribution function (CDF) (累积分布函数).

* Percentiles

*percentile rank* (百分等级) is the position of your raw score in the
fraction of people who scored lower than you or the same. So if you
are "in the 90th percentile," you did as well as or better than 90% of
the people who took the exam.

As an example, if the scores in the sequence were 55, 66, 77, 88 and
99, and you got the 88, then your percentile rank would be ~100 * 4 / 5~
which is 80.

#+begin_src clojure :results pp :exports both :eval no-export
(defn percentile-rank [scores your-score]
  (* 100.0
     (/ (count (filter #(<= % your-score) scores))
        (count scores))))
(percentile-rank [55 66 77 88 99] 88)
#+end_src

#+RESULTS:
: 80.0
:

If you are given a percentile rank and you want to find the
corresponding value, the result of this calculation is a *percentile*
(百分位数).

#+begin_src clojure :results pp :exports both :eval no-export
(defn percentile [scores percentile-rank]
  (let [index (* percentile-rank
                 (/ (dec (count scores)) 100))]
    (nth (sort scores) index)))
(percentile [77 88 99 55 66] 80)
#+end_src

#+RESULTS:
: 88
:

To summarize, ~percentile-rank~ takes a value and computes its
percentile rank in a set of values; ~percentile~ takes a percentile rank
and computes the corresponding value.

* CDFs

*cumulative distribution function* (CDF) (累积分布函数) is the function
that maps from a value to its percentile rank.

#+begin_src clojure :results pp :exports both :eval no-export
(defn eval-cdf [sample x]
  (/ (count (filter #(<= % x) sample))
     (count sample)))
(def samples [1 2 2 3 5])
(eval-cdf samples 3)
#+end_src

#+RESULTS:
: 4/5
:

#+begin_src clojure :results pp :exports both :eval no-export
[(eval-cdf samples 0)
 (eval-cdf samples 1)
 (eval-cdf samples 2)
 (eval-cdf samples 3)
 (eval-cdf samples 4)
 (eval-cdf samples 5)]
#+end_src

#+RESULTS:
: [0 1/5 3/5 4/5 4/5 1]
:

This function is almost identical to ~percentile-rank~, except that the
result is a probability in the range 0 - 1 rather than a percentile
rank in the range 0 - 100.

#+begin_src clojure :results pp :exports both :eval no-export
(range (+ 1 (apply max samples)))
#+end_src

#+RESULTS:
: (0 1 2 3 4 5)
:
#+begin_src clojure :results pp :exports both :eval no-export
(map #(eval-cdf samples %) (range (+ 1 (apply max samples))))
#+end_src

#+RESULTS:
: (0 1/5 3/5 4/5 4/5 1)
:

#+begin_src clojure :results file :output-dir figures :file example-of-a-cdf.svg :exports both :eval no-export
(let [xs (range (+ 2 (apply max samples)))
      chart (chart/step {:x-axis "x"
                         :y-axis "CDF"
                         :series [{:name "cdf"
                                   :xs xs
                                   :ys (map #(eval-cdf samples %) xs)}]})]
  (store! chart nil "notes/figures/example-of-a-cdf.svg"))
#+end_src

#+CAPTION: Example of a CDF
#+RESULTS:
[[file:figures/example-of-a-cdf.svg]]

#+begin_src clojure :results pp :exports both :eval no-export
(zipmap samples (map #(eval-cdf samples %) samples))
#+end_src

#+RESULTS:
: {1 1/5, 2 3/5, 3 4/5, 5 1}
:

* Representing CDFs

Now, we will define two functions:
- ~cdf-prob~: given a value x, computes the probability p = CDF(x).
- ~cdf-value~: given a probability p, computes the corresponding value,
  x; that is, the *inverse CDF* of p.

#+begin_src clojure :results pp :exports both :eval no-export
(defn cdf-prob [samples x]
  (/ (count (filter #(<= % x) samples))
     (count samples)))
(cdf-prob [1 2 2 2 3 4 5] 2)
#+end_src

#+RESULTS:
: 4/7
:

#+begin_src clojure :results pp :exports both :eval no-export
(defn cdf-value [samples p]
  (let [index (* p (dec (count samples)))]
    (nth (sort samples) index)))
(cdf-value [1 2 2 2 3 4 5 6] 0.8)
#+end_src

#+RESULTS:
: 4
:

The following code makes a CDF for the distribution of pregnancy
lengths in the NSFG:

#+begin_src clojure :results silent :exports both :eval no-export
(def fempreg-ds (nsfg/as-dataset "2002FemPreg.dct" "2002FemPreg.dat"))
(def live (-> fempreg-ds
              (ds/filter #(some? (:birthwgt-lb %)))
              (ds/filter #(< (:birthwgt-lb %) 20))))
(def live-prglngth
  (->> (live :prglngth) (sort)))
#+end_src

#+begin_src clojure :results file :output-dir figures :file cdf-of-preg-lng.svg :exports both :eval no-export
(let [chart (chart/step {:x-axis "weeks"
                         :y-axis "CDF"
                         :series [{:name "Pregnancy length"
                                   :xs (range 0 (apply max live-prglngth))
                                   :ys (map #(eval-cdf live-prglngth %) (range 0 (apply max live-prglngth)))}]})]
  (store! chart nil "notes/figures/cdf-of-preg-lng.svg"))
#+end_src

#+CAPTION: CDF of pregnancy length
#+NAME: cdf-of-preg-lng
#+RESULTS:
[[file:figures/cdf-of-preg-lng.svg]]

Figure [[cdf-of-preg-lng]] shows the result. One way to read a CDF is to
look up percentiles. For example, it looks like about 10% of
pregnancies are shorter than 36 weeks, and about 90% are shorter than
41 weeks. The CDF also provides a visual representation of the shape
of the distribution. Common values appear as steep or vertical
selections of the CDF; in this example, the *mode* (众数) at 39 weeks is
apparent. There are few values below 30 weeks, so the CDF in this
range is flat.

* Comparing CDFs

#+begin_src clojure :results silent :eval no-export
(def firsts (-> fempreg-ds
                (ds/filter #(and (= 1 (:outcome %))
                                 (= 1 (:birthord %))))))
(def others (-> fempreg-ds
                (ds/filter #(and (= 1 (:outcome %))
                                 (not= 1 (:birthord %))))))
#+end_src

#+begin_src clojure :results silent :eval no-export
(def fempreg-ds-with-totalwgt_lb
  (let [fempreg-ds-drop-special-wgt
        (-> fempreg-ds
            (ds/filter #(not
                         (or
                          (contains? #{97 98 99} (:birthwgt-lb %))
                          (contains? #{97 98 99} (:birthwgt-oz %))))))]
    (ds/add-or-update-column
     fempreg-ds-drop-special-wgt
     :totalwgt-lb
     (dfn/+
      (fempreg-ds-drop-special-wgt :birthwgt-lb)
      (dfn//
       (fempreg-ds-drop-special-wgt :birthwgt-oz)
       16.)))))

(def firsts (-> fempreg-ds-with-totalwgt_lb
                (ds/filter #(and (= 1 (:outcome %))
                                 (= 1 (:birthord %))
                                 (some? (:totalwgt-lb %))
                                 (<= (:totalwgt-lb %) 16)))))
(def others (-> fempreg-ds-with-totalwgt_lb
                (ds/filter #(and (= 1 (:outcome %))
                                 (not= 1 (:birthord %))
                                 (some? (:totalwgt-lb %))
                                 (<= (:totalwgt-lb %) 16)))))


(def first-wgt
  (->> (firsts :totalwgt-lb) (sort)))

(def other-wgt
  (->> (others :totalwgt-lb) (sort)))
#+end_src

#+begin_src clojure :results file :output-dir figures :file cdf-weight-first-other.svg :exports both :eval no-export
(let [chart (chart/step {:title "Birth weight"
                         :x-axis "weeks"
                         :y-axis "CDF"
                         :series [{:name "first"
                                   :xs (sort first-wgt)
                                   :ys (map #(cdf-prob first-wgt %) (sort first-wgt))}
                                  {:name "other"
                                   :xs (sort other-wgt)
                                   :ys (map #(cdf-prob other-wgt %) (sort other-wgt))}
                                  ]})]
  (store! chart nil "notes/figures/cdf-weight-first-other.svg"))
#+end_src

#+CAPTION: CDF of birth weights for first babies and others
#+name: cdf-weight-first-other
#+RESULTS:
[[file:figures/cdf-weight-first-other.svg]]

Figure [[cdf-weight-first-other]] shows the result. Compared to Figure
[[first-other-totalwgt-prob-histogram]], this figure makes the shape
of the distributions, and the differences between them, much
clearer. We can see that first babies are slightly lighter throughout
the distribution, with a larger discrepancy above the mean.

* Percentile-based statistics

Once you have computed a CDF, it is easy to compute percentiles and
percentile ranks.
- ~percentile-rank~: given a value x, computes its percentile rank,
  100*CDF(x)
- ~percentile~: given a percentile rank p, computes the corresponding
  value, x, Equivalent to ~cdf-value(p/100)~.

~percentile~ can be used to compute percentile-based summary
statistics. For example, the 50th percentile is the value that divides
the distribution in half, also known as the *median*. Like the mean,
the median is a measure of the central tendency of a distribution.

Another percentile-based statistic is the *interquartile range* (IQR),
which is a measure of the spread of a distribution. The IQR is the
difference between the 75th and 25th percentiles.

There are also *quintiles* and *deciles*, all of them are *quantiles*.

* Random numbers

#+begin_src clojure :results pp :exports both :eval no-export
(def weights (-> fempreg-ds-with-totalwgt_lb
                 (ds/filter #(and (= 1 (:outcome %))
                                  (= 1 (:birthord %))
                                  (some? (:totalwgt-lb %))
                                  (<= (:totalwgt-lb %) 16)))
                 :totalwgt-lb))

(def first-cdf-map
  (->> weights
       (map #(vec [% (cdf-prob weights %)]))
       (into {})))
#+end_src

#+RESULTS:
: #'thinkstats2.probability-mass-functions/first-cdf-map
:

#+begin_src clojure :results pp :exports both :eval no-export
(def sample (sort (api/random weights 100)))
(def ranks
  (->> sample
       (map #(cdf/percentile-rank weights %))))
#+end_src

#+RESULTS:
: #'thinkstats2.probability-mass-functions/ranks
:

#+begin_src clojure :results file :output-dir figures :file cdf-of-percentile-ranks-for-random-sample.svg :exports both :eval no-export
(let [chart (chart/step {:x-axis "percentile rank"
                         :y-axis "CDF"
                         :series [{:name "percent ranks"
                                   :xs ranks
                                   :ys (map #(cdf-prob ranks %) (sort ranks))}]})]
  (store! chart nil "notes/figures/cdf-of-percentile-ranks-for-random-sample.svg"))
#+end_src

#+CAPTION: CDF of percentile ranks for a random sample of birth weights
#+NAME: cdf-of-percentile-ranks-for-random-sample
#+RESULTS:
[[file:figures/cdf-of-percentile-ranks-for-random-sample.svg]]

Figure [[cdf-of-percentile-ranks-for-random-sample]] shows the result. The
CDF is approximately a straight line, which means that the
distribution is uniform.

What this figure shows is that 10% of the sample is below the 10th
percentile, 20% is below the 20th percentile, and so on, exactly as we
should expect.

So, regardless of the shape of the CDF, the distribution of percentile
ranks is uniform. This property is usefule, because it is the basis of
a sample and efficient algorithm for generating random numbers with a
given CDF. Here's how:
- Choose a percentile rank uniformly from the range 0 - 100
- Use ~percentile~ to find the value in the distribution that
  corresponds to the percentile rank you chose.


#+begin_src clojure :results pp :exports both :eval no-export
(defn random [samples]
  (let [index (rand-int 101)]
    (cdf/percentile samples index)))
#+end_src

#+RESULTS:
: #'thinkstats2.probability-mass-functions/random
:

Then you can get a random value like this:

#+begin_src clojure :results pp :exports both :eval no-export
(random weights)
#+end_src

#+RESULTS:
: 8.0
:

We can also define ~sample~ function, which takes an interger, n, and
returns a list of n values chosen at random from the CDF.

#+begin_src clojure :results pp :exports both :eval no-export
(defn sample [samples n]
  (let [indices (take n (repeatedly #(rand-int 101)))]
    (map #(cdf/percentile samples %) indices)))
#+end_src

#+RESULTS:
: #'thinkstats2.probability-mass-functions/sample
:

Then you can do this:

#+begin_src clojure :results pp :exports both :eval no-export
(sample weights 10)
#+end_src

#+RESULTS:
: (5.25 7.375 8.0 6.4375 7.125 5.9375 6.6875 7.9375 7.6875 6.8125)
:
